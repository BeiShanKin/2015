//
//  StyleKit.m
//  MShops
//
//  Created by 池晓生 on 14/12/17.
//  Copyright (c) 2014 云起互动. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKit.h"


@implementation StyleKit

#pragma mark Cache

static UIColor* _baseColor = nil;
static UIColor* _colorOfWhite = nil;
static UIColor* _colorOfRed = nil;
static UIColor* _colorOfGreen = nil;
static UIColor* _colorOfSearchInput = nil;
static UIColor* _colorOfPlaceholder = nil;
static UIColor* _colorOfBaseDeep = nil;
static UIColor* _colorOfMenuNormal = nil;
static UIColor* _colorOfMenuSelected = nil;
static UIColor* _colorOfButtonClickDefault = nil;
static UIColor* _colorOfTextNormal = nil;
static UIColor* _colorOfBaseBackground = nil;
static UIColor* _countDownTimeBoardLine = nil;
static UIColor* _colorOfTips = nil;
static UIColor* _colorOfTextLight = nil;
static UIColor* _colorOfTextLightLess = nil;
static UIColor* _colorOfTextLightMore = nil;
static UIColor* _colorOfSpLine = nil;
static UIColor* _colorOfSucc = nil;
static UIColor* _colorOfProgress = nil;
static UIColor* _colorOfAlertView = nil;

static UIImage* _imageOfDefaultAvatarFocus = nil;
static UIImage* _imageOfDefaultAvatar = nil;
static UIImage* _imageOfSearchIcon = nil;
static UIImage* _imageOfSearchIconFocus = nil;
static UIImage* _imageOfCloseIcon = nil;
static UIImage* _imageOfTitleSignOfTopic = nil;
static UIImage* _imageOfTopicSignOfDing = nil;
static UIImage* _imageOfTopicSignOfJing = nil;
static UIImage* _imageOfBack = nil;
static UIImage* _imageOfBackSelected = nil;
static UIImage* _imageOfDot = nil;
static UIImage* _imageOfDotSelected = nil;
static UIImage* _imageOfArrowRight = nil;
static UIImage* _imageOfProgressBar = nil;
static UIImage* _imageOfLogin = nil;
static UIImage* _imageOfLoginFocus = nil;
static UIImage* _imageOfSwitchOn = nil;
static UIImage* _imageOfSwitchOff = nil;
static UIImage* _imageOfPasswordBox = nil;
static UIImage* _imageOfFullInputBox = nil;
static UIImage* _imageOfRushToBuy = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _baseColor = [UIColor colorWithRed: 1 green: 0.608 blue: 0.502 alpha: 1];
    _colorOfWhite = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    _colorOfRed = [UIColor colorWithRed:1 green:0 blue:0 alpha:1];
    _colorOfGreen = [UIColor colorWithRed:150/255.0 green:199/255.0 blue:53/255.0 alpha:1];
    _colorOfSearchInput = [UIColor colorWithRed: 0.863 green: 0.204 blue: 0.118 alpha: 0.65];
    _colorOfPlaceholder = [UIColor colorWithRed: 0.863 green: 0.204 blue: 0.118 alpha: 0.4];
    _colorOfBaseDeep = [UIColor colorWithRed: 211/255.0 green: 3/255.0 blue: 77/255.0 alpha: 1];
    _colorOfMenuNormal = [UIColor colorWithRed: 1 green: 0.608 blue: 0.502 alpha: 1];
    _colorOfMenuSelected = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    _colorOfButtonClickDefault = [UIColor colorWithRed: 0.49 green: 0.49 blue: 0.49 alpha: 0.05];
    _colorOfTextNormal = [UIColor colorWithRed: 0.157 green: 0.157 blue: 0.157 alpha: 1];
    _colorOfBaseBackground = [UIColor colorWithRed: 0.941 green: 0.941 blue: 0.941 alpha: 1];
    _countDownTimeBoardLine = [UIColor colorWithRed: 0.836 green: 0.269 blue: 0.192 alpha: 1];
    _colorOfTips = [UIColor colorWithRed: 0.281 green: 0.708 blue: 1 alpha: 1];
    _colorOfTextLight = [UIColor colorWithRed: 0.871 green: 0.871 blue: 0.871 alpha: 1];
    _colorOfTextLightLess = [UIColor colorWithRed: 0.984 green: 0.984 blue: 0.984 alpha: 1];
    _colorOfTextLightMore = [UIColor colorWithRed: 0.649 green: 0.649 blue: 0.649 alpha: 1];
    _colorOfSpLine = [UIColor colorWithRed: 0.898 green: 0.898 blue: 0.898 alpha: 1];
    _colorOfSucc = [UIColor colorWithRed: 0.251 green: 0.714 blue: 0.129 alpha: 1];
    _colorOfProgress = [UIColor colorWithRed: 1 green: 0.635 blue: 0 alpha: 1];
    _colorOfAlertView = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.95];

}

#pragma mark Colors

+ (UIColor*)baseColor { return _baseColor; }
+ (UIColor*)colorOfWhite { return _colorOfWhite; }
+ (UIColor*)colorOfRed  { return _colorOfRed; }
+ (UIColor*)colorOfGreen { return _colorOfGreen; }
+ (UIColor*)colorOfSearchInput { return _colorOfSearchInput; }
+ (UIColor*)colorOfPlaceholder { return _colorOfPlaceholder; }
+ (UIColor*)colorOfBaseDeep { return _colorOfBaseDeep; }
+ (UIColor*)colorOfMenuNormal { return _colorOfMenuNormal; }
+ (UIColor*)colorOfMenuSelected { return _colorOfMenuSelected; }
+ (UIColor*)colorOfButtonClickDefault { return _colorOfButtonClickDefault; }
+ (UIColor*)colorOfTextNormal { return _colorOfTextNormal; }
+ (UIColor*)colorOfBaseBackground { return _colorOfBaseBackground; }
+ (UIColor*)countDownTimeBoardLine { return _countDownTimeBoardLine; }
+ (UIColor*)colorOfTips { return _colorOfTips; }
+ (UIColor*)colorOfTextLight { return _colorOfTextLight; }
+ (UIColor*)colorOfTextLightLess { return _colorOfTextLightLess; }
+ (UIColor*)colorOfTextLightMore { return _colorOfTextLightMore; }
+ (UIColor*)colorOfSpLine { return _colorOfSpLine; }
+ (UIColor*)colorOfSucc { return _colorOfSucc; }
+ (UIColor*)colorOfProgress { return _colorOfProgress; }
+ (UIColor*)colorOfAlertView { return _colorOfAlertView; }

#pragma mark Drawing Methods

+ (void)drawDefaultAvatarFocus
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* bodyColor = [UIColor colorWithRed: 0.89 green: 0.224 blue: 0.133 alpha: 0.5];

    //// normal
    {
        //// bg Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 40, 40);

        UIBezierPath* bgPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-30, -30, 60, 60)];
        [StyleKit.colorOfWhite setFill];
        [bgPath fill];

        CGContextRestoreGState(context);


        //// body Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 40, 35.46);

        UIBezierPath* bodyPath = UIBezierPath.bezierPath;
        [bodyPath moveToPoint: CGPointMake(24.39, 22.02)];
        [bodyPath addCurveToPoint: CGPointMake(-0, 34.54) controlPoint1: CGPointMake(18.94, 29.6) controlPoint2: CGPointMake(10.05, 34.54)];
        [bodyPath addCurveToPoint: CGPointMake(-24.39, 22.02) controlPoint1: CGPointMake(-10.05, 34.54) controlPoint2: CGPointMake(-18.94, 29.6)];
        [bodyPath addCurveToPoint: CGPointMake(-7.52, 10.45) controlPoint1: CGPointMake(-20.35, 16.4) controlPoint2: CGPointMake(-14.41, 12.23)];
        [bodyPath addCurveToPoint: CGPointMake(0, 9.5) controlPoint1: CGPointMake(-5.12, 9.83) controlPoint2: CGPointMake(-2.6, 9.5)];
        [bodyPath addCurveToPoint: CGPointMake(24.39, 22.02) controlPoint1: CGPointMake(10.05, 9.5) controlPoint2: CGPointMake(18.94, 14.44)];
        [bodyPath closePath];
        [bodyColor setFill];
        [bodyPath fill];

        CGContextRestoreGState(context);


        //// head Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 40, 40);

        UIBezierPath* headPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-13.3, -24.26, 26.61, 26.61)];
        [bodyColor setFill];
        [headPath fill];

        CGContextRestoreGState(context);
    }
}

+ (void)drawDefaultAvatar
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* bodyColor = [UIColor colorWithRed: 0.89 green: 0.224 blue: 0.133 alpha: 0.5];

    //// normal
    {
        //// bg Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 40, 40);

        UIBezierPath* bgPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-30, -30, 60, 60)];
        [StyleKit.baseColor setFill];
        [bgPath fill];

        CGContextRestoreGState(context);


        //// body Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 40, 35.46);

        UIBezierPath* bodyPath = UIBezierPath.bezierPath;
        [bodyPath moveToPoint: CGPointMake(24.39, 22.02)];
        [bodyPath addCurveToPoint: CGPointMake(-0, 34.54) controlPoint1: CGPointMake(18.94, 29.6) controlPoint2: CGPointMake(10.05, 34.54)];
        [bodyPath addCurveToPoint: CGPointMake(-24.39, 22.02) controlPoint1: CGPointMake(-10.05, 34.54) controlPoint2: CGPointMake(-18.94, 29.6)];
        [bodyPath addCurveToPoint: CGPointMake(-7.52, 10.45) controlPoint1: CGPointMake(-20.35, 16.4) controlPoint2: CGPointMake(-14.41, 12.23)];
        [bodyPath addCurveToPoint: CGPointMake(0, 9.5) controlPoint1: CGPointMake(-5.12, 9.83) controlPoint2: CGPointMake(-2.6, 9.5)];
        [bodyPath addCurveToPoint: CGPointMake(24.39, 22.02) controlPoint1: CGPointMake(10.05, 9.5) controlPoint2: CGPointMake(18.94, 14.44)];
        [bodyPath closePath];
        [bodyColor setFill];
        [bodyPath fill];

        CGContextRestoreGState(context);


        //// head Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 40, 40);

        UIBezierPath* headPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-13.3, -24.26, 26.61, 26.61)];
        [bodyColor setFill];
        [headPath fill];

        CGContextRestoreGState(context);
    }
}

+ (void)drawSearchIcon
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* colorOfSearchBar = [UIColor colorWithRed: 0.863 green: 0.204 blue: 0.118 alpha: 0.5];

    //// icon
    {
        //// bar Drawing
        UIBezierPath* barPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(21, 19.37, 35, 34)];
        [colorOfSearchBar setStroke];
        barPath.lineWidth = 5;
        [barPath stroke];


        //// cicle Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 47.68, 51.31);
        CGContextRotateCTM(context, -45 * M_PI / 180);

        UIBezierPath* ciclePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 6.28, 20.78) cornerRadius: 3.14];
        [colorOfSearchBar setFill];
        [ciclePath fill];

        CGContextRestoreGState(context);
    }
}

+ (void)drawSearchIconFocus
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* colorOfSeleted = [UIColor colorWithRed: 1 green: 0.608 blue: 0.502 alpha: 0.5];

    //// icon
    {
        //// bar Drawing
        UIBezierPath* barPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(21, 19.37, 35, 34)];
        [colorOfSeleted setStroke];
        barPath.lineWidth = 5;
        [barPath stroke];


        //// cicle Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 47.68, 51.31);
        CGContextRotateCTM(context, -45 * M_PI / 180);

        UIBezierPath* ciclePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 6.28, 20.78) cornerRadius: 3.14];
        [colorOfSeleted setFill];
        [ciclePath fill];

        CGContextRestoreGState(context);
    }
}

+ (void)drawTimeCountDownBoardWithPHour: (NSString*)pHour pMinute: (NSString*)pMinute pSecond: (NSString*)pSecond
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// boxSecond Drawing
    UIBezierPath* boxSecondPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 30, 30) cornerRadius: 2];
    [StyleKit.colorOfBaseDeep setFill];
    [boxSecondPath fill];


    //// boxMinute Drawing
    UIBezierPath* boxMinutePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(48, 0, 30, 30) cornerRadius: 2];
    [StyleKit.colorOfBaseDeep setFill];
    [boxMinutePath fill];


    //// boxHour Drawing
    UIBezierPath* boxHourPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(95, 0, 30, 30) cornerRadius: 2];
    [StyleKit.colorOfBaseDeep setFill];
    [boxHourPath fill];


    //// TextHour Drawing
    CGRect textHourRect = CGRectMake(0, 0, 30, 30);
    UIFont* textHourFont = [UIFont boldSystemFontOfSize: 25];
    [UIColor.whiteColor setFill];
    CGFloat textHourTextHeight = [pHour sizeWithFont: textHourFont constrainedToSize: CGSizeMake(CGRectGetWidth(textHourRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textHourRect);
    [pHour drawInRect: CGRectMake(CGRectGetMinX(textHourRect), CGRectGetMinY(textHourRect) + (CGRectGetHeight(textHourRect) - textHourTextHeight) / 2, CGRectGetWidth(textHourRect), textHourTextHeight) withFont: textHourFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    CGContextRestoreGState(context);


    //// TextMinute Drawing
    CGRect textMinuteRect = CGRectMake(48, 0, 30, 30);
    UIFont* textMinuteFont = [UIFont boldSystemFontOfSize: 25];
    [UIColor.whiteColor setFill];
    CGFloat textMinuteTextHeight = [pMinute sizeWithFont: textMinuteFont constrainedToSize: CGSizeMake(CGRectGetWidth(textMinuteRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textMinuteRect);
    [pMinute drawInRect: CGRectMake(CGRectGetMinX(textMinuteRect), CGRectGetMinY(textMinuteRect) + (CGRectGetHeight(textMinuteRect) - textMinuteTextHeight) / 2, CGRectGetWidth(textMinuteRect), textMinuteTextHeight) withFont: textMinuteFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    CGContextRestoreGState(context);


    //// TextSecond Drawing
    CGRect textSecondRect = CGRectMake(95, 0, 30, 30);
    UIFont* textSecondFont = [UIFont boldSystemFontOfSize: 25];
    [UIColor.whiteColor setFill];
    CGFloat textSecondTextHeight = [pSecond sizeWithFont: textSecondFont constrainedToSize: CGSizeMake(CGRectGetWidth(textSecondRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textSecondRect);
    [pSecond drawInRect: CGRectMake(CGRectGetMinX(textSecondRect), CGRectGetMinY(textSecondRect) + (CGRectGetHeight(textSecondRect) - textSecondTextHeight) / 2, CGRectGetWidth(textSecondRect), textSecondTextHeight) withFont: textSecondFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    CGContextRestoreGState(context);


    //// lineHour Drawing
    UIBezierPath* lineHourPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 15, 30, 1) cornerRadius: 0.5];
    [StyleKit.countDownTimeBoardLine setFill];
    [lineHourPath fill];


    //// pointHourTop Drawing
    UIBezierPath* pointHourTopPath = [UIBezierPath bezierPathWithRect: CGRectMake(38, 7, 3, 3)];
    [StyleKit.colorOfBaseDeep setFill];
    [pointHourTopPath fill];


    //// pointHourBottom Drawing
    UIBezierPath* pointHourBottomPath = [UIBezierPath bezierPathWithRect: CGRectMake(38, 19, 3, 3)];
    [StyleKit.colorOfBaseDeep setFill];
    [pointHourBottomPath fill];


    //// lineMinute Drawing
    UIBezierPath* lineMinutePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(48, 15, 30, 1) cornerRadius: 0.5];
    [StyleKit.countDownTimeBoardLine setFill];
    [lineMinutePath fill];


    //// lineSecond Drawing
    UIBezierPath* lineSecondPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(95, 15, 30, 1) cornerRadius: 0.5];
    [StyleKit.countDownTimeBoardLine setFill];
    [lineSecondPath fill];


    //// pointMinuteTop Drawing
    UIBezierPath* pointMinuteTopPath = [UIBezierPath bezierPathWithRect: CGRectMake(85, 7, 3, 3)];
    [StyleKit.colorOfBaseDeep setFill];
    [pointMinuteTopPath fill];


    //// pointMinuteBottom Drawing
    UIBezierPath* pointMinuteBottomPath = [UIBezierPath bezierPathWithRect: CGRectMake(85, 19, 3, 3)];
    [StyleKit.colorOfBaseDeep setFill];
    [pointMinuteBottomPath fill];
}

+ (void)drawTimeCountDownDisabledWithPTitle: (NSString*)pTitle
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 125, 30) cornerRadius: 3];
    [StyleKit.colorOfBaseDeep setFill];
    [rectanglePath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(0, 0, 125, 30);
    UIFont* textFont = [UIFont boldSystemFontOfSize: UIFont.systemFontSize];
    [UIColor.whiteColor setFill];
    CGFloat textTextHeight = [pTitle sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [pTitle drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    CGContextRestoreGState(context);
}

+ (void)drawCloseIcon
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* colorOfCloseBG = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.8];

    //// box Drawing
    UIBezierPath* boxPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 80, 80)];
    [colorOfCloseBG setFill];
    [boxPath fill];


    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 52.93);
    CGContextRotateCTM(context, -45 * M_PI / 180);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 46, 10) cornerRadius: 5];
    [StyleKit.colorOfWhite setFill];
    [rectanglePath fill];

    CGContextRestoreGState(context);


    //// line Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 52.53, 60);
    CGContextRotateCTM(context, -135 * M_PI / 180);

    UIBezierPath* linePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 46, 10) cornerRadius: 5];
    [StyleKit.colorOfWhite setFill];
    [linePath fill];

    CGContextRestoreGState(context);
}

+ (void)drawTitleSignOfTopic
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 40, 40) cornerRadius: 5];
    [StyleKit.colorOfBaseDeep setFill];
    [rectanglePath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(0, 0, 40, 40);
    {
        NSString* textContent = @"帖";
        UIFont* textFont = [UIFont boldSystemFontOfSize: 30];
        [UIColor.whiteColor setFill];
        CGFloat textTextHeight = [textContent sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
        CGContextRestoreGState(context);
    }
}

+ (void)drawTopicSignOfDing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* colorOfTopicDing = [UIColor colorWithRed: 1 green: 0.588 blue: 0 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 40, 40) cornerRadius: 5];
    [colorOfTopicDing setFill];
    [rectanglePath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(0, 0, 40, 40);
    {
        NSString* textContent = @"顶";
        UIFont* textFont = [UIFont boldSystemFontOfSize: 30];
        [UIColor.whiteColor setFill];
        CGFloat textTextHeight = [textContent sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
        CGContextRestoreGState(context);
    }
}

+ (void)drawTopicSignOfJing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 40, 40) cornerRadius: 5];
    [StyleKit.colorOfBaseDeep setFill];
    [rectanglePath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(0, 0, 40, 40);
    {
        NSString* textContent = @"精";
        UIFont* textFont = [UIFont boldSystemFontOfSize: 30];
        [UIColor.whiteColor setFill];
        CGFloat textTextHeight = [textContent sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
        CGContextRestoreGState(context);
    }
}

+ (void)drawBack
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// bg Drawing
    UIBezierPath* bgPath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 100, 40)];
    [StyleKit.colorOfBaseDeep setFill];
    [bgPath fill];


    //// bottom Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20.78, 29.58);
    CGContextRotateCTM(context, 135 * M_PI / 180);

    UIBezierPath* bottomPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 2.01, 14.65) cornerRadius: 1.01];
    [StyleKit.colorOfWhite setFill];
    [bottomPath fill];

    CGContextRestoreGState(context);


    //// title Drawing
    CGRect titleRect = CGRectMake(31, 10, 69, 21);
    {
        NSString* textContent = @"返回";
        UIFont* titleFont = [UIFont boldSystemFontOfSize: 16];
        [UIColor.whiteColor setFill];
        CGFloat titleTextHeight = [textContent sizeWithFont: titleFont constrainedToSize: CGSizeMake(CGRectGetWidth(titleRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, titleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(titleRect), CGRectGetMinY(titleRect) + (CGRectGetHeight(titleRect) - titleTextHeight) / 2, CGRectGetWidth(titleRect), titleTextHeight) withFont: titleFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentLeft];
        CGContextRestoreGState(context);
    }


    //// top Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10.78, 21.58);
    CGContextRotateCTM(context, -135 * M_PI / 180);

    UIBezierPath* topPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 2.01, 14.65) cornerRadius: 1.01];
    [StyleKit.colorOfWhite setFill];
    [topPath fill];

    CGContextRestoreGState(context);
}

+ (void)drawBackSelected
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* colorOfSeleted = [UIColor colorWithRed: 1 green: 0.608 blue: 0.502 alpha: 0.5];

    //// bg Drawing
    UIBezierPath* bgPath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 100, 40)];
    [colorOfSeleted setFill];
    [bgPath fill];


    //// bottom Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20.78, 29.58);
    CGContextRotateCTM(context, 135 * M_PI / 180);

    UIBezierPath* bottomPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 2.01, 14.65) cornerRadius: 1.01];
    [StyleKit.colorOfWhite setFill];
    [bottomPath fill];

    CGContextRestoreGState(context);


    //// title Drawing
    CGRect titleRect = CGRectMake(31, 10, 69, 21);
    {
        NSString* textContent = @"返回";
        UIFont* titleFont = [UIFont boldSystemFontOfSize: 16];
        [UIColor.whiteColor setFill];
        CGFloat titleTextHeight = [textContent sizeWithFont: titleFont constrainedToSize: CGSizeMake(CGRectGetWidth(titleRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, titleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(titleRect), CGRectGetMinY(titleRect) + (CGRectGetHeight(titleRect) - titleTextHeight) / 2, CGRectGetWidth(titleRect), titleTextHeight) withFont: titleFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentLeft];
        CGContextRestoreGState(context);
    }


    //// top Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10.78, 21.58);
    CGContextRotateCTM(context, -135 * M_PI / 180);

    UIBezierPath* topPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 2.01, 14.65) cornerRadius: 1.01];
    [StyleKit.colorOfWhite setFill];
    [topPath fill];

    CGContextRestoreGState(context);
}

+ (void)drawDot
{
    //// Color Declarations
    UIColor* colorOfDot = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.4];

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 15, 15)];
    [colorOfDot setFill];
    [ovalPath fill];
}

+ (void)drawDotSelected
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 15, 15)];
    [StyleKit.colorOfBaseDeep setFill];
    [ovalPath fill];
}

+ (void)drawExpressSignWithPTitle: (NSString*)pTitle
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 100, 40) cornerRadius: 5];
    [StyleKit.colorOfBaseDeep setFill];
    [rectanglePath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(0, 0, 100, 40);
    UIFont* textFont = [UIFont boldSystemFontOfSize: 20];
    [UIColor.whiteColor setFill];
    CGFloat textTextHeight = [pTitle sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [pTitle drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    CGContextRestoreGState(context);
}

+ (void)drawArrowRight
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// bottom Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 22.78, 15.22);
    CGContextRotateCTM(context, 135 * M_PI / 180);

    UIBezierPath* bottomPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 2.01, 14.65) cornerRadius: 1.01];
    [StyleKit.colorOfTextLightMore setFill];
    [bottomPath fill];

    CGContextRestoreGState(context);


    //// top Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 21.78, 14.22);
    CGContextRotateCTM(context, 45 * M_PI / 180);

    UIBezierPath* topPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 2.01, 14.65) cornerRadius: 1.01];
    [StyleKit.colorOfTextLightMore setFill];
    [topPath fill];

    CGContextRestoreGState(context);
}

+ (void)drawProgressBar
{

    //// doneBar Drawing
    UIBezierPath* doneBarPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(1, 1, 298, 23) cornerRadius: 11.5];
    [StyleKit.colorOfProgress setFill];
    [doneBarPath fill];


    //// boxBar Drawing
    UIBezierPath* boxBarPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(1, 1, 298, 23) cornerRadius: 11.5];
    [StyleKit.colorOfProgress setStroke];
    boxBarPath.lineWidth = 2;
    [boxBarPath stroke];


    //// notDoneBar Drawing
    UIBezierPath* notDoneBarPath = [UIBezierPath bezierPathWithRect: CGRectMake(12, 1, 276, 23)];
    [StyleKit.colorOfWhite setFill];
    [notDoneBarPath fill];


    //// doneBarDynamic Drawing
    UIBezierPath* doneBarDynamicPath = [UIBezierPath bezierPathWithRect: CGRectMake(12, 1, 11, 23)];
    [StyleKit.colorOfProgress setFill];
    [doneBarDynamicPath fill];


    //// notDoneBarRound Drawing
    UIBezierPath* notDoneBarRoundPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(23, 1, 276, 23) cornerRadius: 11.5];
    [StyleKit.colorOfWhite setFill];
    [notDoneBarRoundPath fill];
}

+ (void)drawLogin
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 350, 120) cornerRadius: 10];
    [StyleKit.colorOfProgress setFill];
    [rectanglePath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(0, 0, 350, 120);
    {
        NSString* textContent = @"马上登录";
        UIFont* textFont = [UIFont boldSystemFontOfSize: 50];
        [UIColor.whiteColor setFill];
        CGFloat textTextHeight = [textContent sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
        CGContextRestoreGState(context);
    }
}

+ (void)drawLoginFocus
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* colorOfLoginButtonFocus = [UIColor colorWithRed: 1 green: 0.474 blue: 0 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 350, 120) cornerRadius: 10];
    [StyleKit.colorOfProgress setFill];
    [rectanglePath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(0, 0, 350, 120);
    UIBezierPath* textPath = [UIBezierPath bezierPathWithRoundedRect: textRect cornerRadius: 10];
    [colorOfLoginButtonFocus setFill];
    [textPath fill];
    {
        NSString* textContent = @"马上登录";
        UIFont* textFont = [UIFont boldSystemFontOfSize: 50];
        [UIColor.whiteColor setFill];
        CGFloat textTextHeight = [textContent sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
        CGContextRestoreGState(context);
    }
}

+ (void)drawSwitchOn
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 60, 30) cornerRadius: 15];
    [StyleKit.colorOfSucc setFill];
    [rectanglePath fill];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(31, 1, 28, 28)];
    [StyleKit.colorOfWhite setFill];
    [ovalPath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(11, 7, 15, 16);
    {
        NSString* textContent = @"开";
        UIFont* textFont = [UIFont boldSystemFontOfSize: 15];
        [UIColor.whiteColor setFill];
        CGFloat textTextHeight = [textContent sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentLeft];
        CGContextRestoreGState(context);
    }
}

+ (void)drawSwitchOff
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 60, 30) cornerRadius: 15];
    [StyleKit.colorOfTextLightMore setFill];
    [rectanglePath fill];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1, 1, 28, 28)];
    [StyleKit.colorOfWhite setFill];
    [ovalPath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(34, 7, 15, 16);
    {
        NSString* textContent = @"关";
        UIFont* textFont = [UIFont boldSystemFontOfSize: 15];
        [UIColor.whiteColor setFill];
        CGFloat textTextHeight = [textContent sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentLeft];
        CGContextRestoreGState(context);
    }
}

+ (void)drawPasswordBox
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* colorOfPasswordBG = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Shadow Declarations
    UIColor* inputShadow = [UIColor.blackColor colorWithAlphaComponent: 0.2];
    CGSize inputShadowOffset = CGSizeMake(0.1, -0.1);
    CGFloat inputShadowBlurRadius = 3;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 50, 50)];
    [colorOfPasswordBG setFill];
    [rectanglePath fill];

    ////// Rectangle Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(rectanglePath.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([inputShadow CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [inputShadow colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, inputShadowOffset, inputShadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [rectanglePath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);
}

+ (void)drawFullInputBox
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* colorOfPasswordBG = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Shadow Declarations
    UIColor* inputShadow = [UIColor.blackColor colorWithAlphaComponent: 0.2];
    CGSize inputShadowOffset = CGSizeMake(0.1, -0.1);
    CGFloat inputShadowBlurRadius = 3;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 320, 200)];
    [colorOfPasswordBG setFill];
    [rectanglePath fill];

    ////// Rectangle Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(rectanglePath.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([inputShadow CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [inputShadow colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, inputShadowOffset, inputShadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [rectanglePath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);
}

+ (void)drawRebateTagWithPRebate: (NSString*)pRebate
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(50, 0)];
    [bezierPath addLineToPoint: CGPointMake(43, 10)];
    [bezierPath addLineToPoint: CGPointMake(50, 20)];
    [bezierPath addLineToPoint: CGPointMake(0, 20)];
    [bezierPath addLineToPoint: CGPointMake(0, 0)];
    [bezierPath addLineToPoint: CGPointMake(50, 0)];
    [bezierPath closePath];
    [StyleKit.colorOfBaseDeep setFill];
    [bezierPath fill];


    //// Text Drawing
    CGRect textRect = CGRectMake(0, 0, 43, 20);
    UIFont* textFont = [UIFont boldSystemFontOfSize: UIFont.systemFontSize];
    [UIColor.whiteColor setFill];
    CGFloat textTextHeight = [pRebate sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [pRebate drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    CGContextRestoreGState(context);
}

+ (void)drawRushToBuy
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 60, 30) cornerRadius: 3];
    [StyleKit.colorOfBaseDeep setFill];
    [rectanglePath fill];


    //// title Drawing
    CGRect titleRect = CGRectMake(0, 0, 60, 30);
    {
        NSString* textContent = @"抢购";
        UIFont* titleFont = [UIFont boldSystemFontOfSize: 15];
        [UIColor.whiteColor setFill];
        CGFloat titleTextHeight = [textContent sizeWithFont: titleFont constrainedToSize: CGSizeMake(CGRectGetWidth(titleRect), INFINITY) lineBreakMode: UILineBreakModeWordWrap].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, titleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(titleRect), CGRectGetMinY(titleRect) + (CGRectGetHeight(titleRect) - titleTextHeight) / 2, CGRectGetWidth(titleRect), titleTextHeight) withFont: titleFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
        CGContextRestoreGState(context);
    }
}

#pragma mark Generated Images

+ (UIImage*)imageOfDefaultAvatarFocus
{
    if (_imageOfDefaultAvatarFocus)
        return _imageOfDefaultAvatarFocus;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(80, 80), NO, 0.0f);
    [StyleKit drawDefaultAvatarFocus];

    _imageOfDefaultAvatarFocus = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDefaultAvatarFocus;
}

+ (UIImage*)imageOfDefaultAvatar
{
    if (_imageOfDefaultAvatar)
        return _imageOfDefaultAvatar;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(80, 80), NO, 0.0f);
    [StyleKit drawDefaultAvatar];

    _imageOfDefaultAvatar = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDefaultAvatar;
}

+ (UIImage*)imageOfSearchIcon
{
    if (_imageOfSearchIcon)
        return _imageOfSearchIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(80, 80), NO, 0.0f);
    [StyleKit drawSearchIcon];

    _imageOfSearchIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSearchIcon;
}

+ (UIImage*)imageOfSearchIconFocus
{
    if (_imageOfSearchIconFocus)
        return _imageOfSearchIconFocus;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(80, 80), NO, 0.0f);
    [StyleKit drawSearchIconFocus];

    _imageOfSearchIconFocus = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSearchIconFocus;
}

+ (UIImage*)imageOfCloseIcon
{
    if (_imageOfCloseIcon)
        return _imageOfCloseIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(80, 80), NO, 0.0f);
    [StyleKit drawCloseIcon];

    _imageOfCloseIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCloseIcon;
}

+ (UIImage*)imageOfTitleSignOfTopic
{
    if (_imageOfTitleSignOfTopic)
        return _imageOfTitleSignOfTopic;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [StyleKit drawTitleSignOfTopic];

    _imageOfTitleSignOfTopic = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTitleSignOfTopic;
}

+ (UIImage*)imageOfTopicSignOfDing
{
    if (_imageOfTopicSignOfDing)
        return _imageOfTopicSignOfDing;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [StyleKit drawTopicSignOfDing];

    _imageOfTopicSignOfDing = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTopicSignOfDing;
}

+ (UIImage*)imageOfTopicSignOfJing
{
    if (_imageOfTopicSignOfJing)
        return _imageOfTopicSignOfJing;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [StyleKit drawTopicSignOfJing];

    _imageOfTopicSignOfJing = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTopicSignOfJing;
}

+ (UIImage*)imageOfBack
{
    if (_imageOfBack)
        return _imageOfBack;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(100, 40), NO, 0.0f);
    [StyleKit drawBack];

    _imageOfBack = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfBack;
}

+ (UIImage*)imageOfBackSelected
{
    if (_imageOfBackSelected)
        return _imageOfBackSelected;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(100, 40), NO, 0.0f);
    [StyleKit drawBackSelected];

    _imageOfBackSelected = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfBackSelected;
}

+ (UIImage*)imageOfDot
{
    if (_imageOfDot)
        return _imageOfDot;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(15, 15), NO, 0.0f);
    [StyleKit drawDot];

    _imageOfDot = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDot;
}

+ (UIImage*)imageOfDotSelected
{
    if (_imageOfDotSelected)
        return _imageOfDotSelected;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(15, 15), NO, 0.0f);
    [StyleKit drawDotSelected];

    _imageOfDotSelected = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDotSelected;
}

+ (UIImage*)imageOfExpressSignWithPTitle: (NSString*)pTitle
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(100, 40), NO, 0.0f);
    [StyleKit drawExpressSignWithPTitle: pTitle];

    UIImage* imageOfExpressSign = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfExpressSign;
}

+ (UIImage*)imageOfArrowRight
{
    if (_imageOfArrowRight)
        return _imageOfArrowRight;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [StyleKit drawArrowRight];

    _imageOfArrowRight = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfArrowRight;
}

+ (UIImage*)imageOfProgressBar
{
    if (_imageOfProgressBar)
        return _imageOfProgressBar;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(300, 25), NO, 0.0f);
    [StyleKit drawProgressBar];

    _imageOfProgressBar = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfProgressBar;
}

+ (UIImage*)imageOfLogin
{
    if (_imageOfLogin)
        return _imageOfLogin;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(350, 120), NO, 0.0f);
    [StyleKit drawLogin];

    _imageOfLogin = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLogin;
}

+ (UIImage*)imageOfLoginFocus
{
    if (_imageOfLoginFocus)
        return _imageOfLoginFocus;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(350, 120), NO, 0.0f);
    [StyleKit drawLoginFocus];

    _imageOfLoginFocus = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginFocus;
}

+ (UIImage*)imageOfSwitchOn
{
    if (_imageOfSwitchOn)
        return _imageOfSwitchOn;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(60, 30), NO, 0.0f);
    [StyleKit drawSwitchOn];

    _imageOfSwitchOn = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSwitchOn;
}

+ (UIImage*)imageOfSwitchOff
{
    if (_imageOfSwitchOff)
        return _imageOfSwitchOff;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(60, 30), NO, 0.0f);
    [StyleKit drawSwitchOff];

    _imageOfSwitchOff = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSwitchOff;
}

+ (UIImage*)imageOfPasswordBox
{
    if (_imageOfPasswordBox)
        return _imageOfPasswordBox;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), NO, 0.0f);
    [StyleKit drawPasswordBox];

    _imageOfPasswordBox = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfPasswordBox;
}

+ (UIImage*)imageOfFullInputBox
{
    if (_imageOfFullInputBox)
        return _imageOfFullInputBox;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(320, 200), NO, 0.0f);
    [StyleKit drawFullInputBox];

    _imageOfFullInputBox = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfFullInputBox;
}

+ (UIImage*)imageOfRebateTagWithPRebate: (NSString*)pRebate
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 20), NO, 0.0f);
    [StyleKit drawRebateTagWithPRebate: pRebate];

    UIImage* imageOfRebateTag = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfRebateTag;
}

+ (UIImage*)imageOfRushToBuy
{
    if (_imageOfRushToBuy)
        return _imageOfRushToBuy;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(60, 30), NO, 0.0f);
    [StyleKit drawRushToBuy];

    _imageOfRushToBuy = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfRushToBuy;
}

#pragma mark Customization Infrastructure

- (void)setDefaultAvatarFocusTargets: (NSArray*)defaultAvatarFocusTargets
{
    _defaultAvatarFocusTargets = defaultAvatarFocusTargets;

    for (id target in self.defaultAvatarFocusTargets)
        [target setImage: StyleKit.imageOfDefaultAvatarFocus];
}

- (void)setDefaultAvatarTargets: (NSArray*)defaultAvatarTargets
{
    _defaultAvatarTargets = defaultAvatarTargets;

    for (id target in self.defaultAvatarTargets)
        [target setImage: StyleKit.imageOfDefaultAvatar];
}

- (void)setSearchIconTargets: (NSArray*)searchIconTargets
{
    _searchIconTargets = searchIconTargets;

    for (id target in self.searchIconTargets)
        [target setImage: StyleKit.imageOfSearchIcon];
}

- (void)setSearchIconFocusTargets: (NSArray*)searchIconFocusTargets
{
    _searchIconFocusTargets = searchIconFocusTargets;

    for (id target in self.searchIconFocusTargets)
        [target setImage: StyleKit.imageOfSearchIconFocus];
}

- (void)setCloseIconTargets: (NSArray*)closeIconTargets
{
    _closeIconTargets = closeIconTargets;

    for (id target in self.closeIconTargets)
        [target setImage: StyleKit.imageOfCloseIcon];
}

- (void)setTitleSignOfTopicTargets: (NSArray*)titleSignOfTopicTargets
{
    _titleSignOfTopicTargets = titleSignOfTopicTargets;

    for (id target in self.titleSignOfTopicTargets)
        [target setImage: StyleKit.imageOfTitleSignOfTopic];
}

- (void)setTopicSignOfDingTargets: (NSArray*)topicSignOfDingTargets
{
    _topicSignOfDingTargets = topicSignOfDingTargets;

    for (id target in self.topicSignOfDingTargets)
        [target setImage: StyleKit.imageOfTopicSignOfDing];
}

- (void)setTopicSignOfJingTargets: (NSArray*)topicSignOfJingTargets
{
    _topicSignOfJingTargets = topicSignOfJingTargets;

    for (id target in self.topicSignOfJingTargets)
        [target setImage: StyleKit.imageOfTopicSignOfJing];
}

- (void)setBackTargets: (NSArray*)backTargets
{
    _backTargets = backTargets;

    for (id target in self.backTargets)
        [target setImage: StyleKit.imageOfBack];
}

- (void)setBackSelectedTargets: (NSArray*)backSelectedTargets
{
    _backSelectedTargets = backSelectedTargets;

    for (id target in self.backSelectedTargets)
        [target setImage: StyleKit.imageOfBackSelected];
}

- (void)setDotTargets: (NSArray*)dotTargets
{
    _dotTargets = dotTargets;

    for (id target in self.dotTargets)
        [target setImage: StyleKit.imageOfDot];
}

- (void)setDotSelectedTargets: (NSArray*)dotSelectedTargets
{
    _dotSelectedTargets = dotSelectedTargets;

    for (id target in self.dotSelectedTargets)
        [target setImage: StyleKit.imageOfDotSelected];
}

- (void)setArrowRightTargets: (NSArray*)arrowRightTargets
{
    _arrowRightTargets = arrowRightTargets;

    for (id target in self.arrowRightTargets)
        [target setImage: StyleKit.imageOfArrowRight];
}

- (void)setProgressBarTargets: (NSArray*)progressBarTargets
{
    _progressBarTargets = progressBarTargets;

    for (id target in self.progressBarTargets)
        [target setImage: StyleKit.imageOfProgressBar];
}

- (void)setLoginTargets: (NSArray*)loginTargets
{
    _loginTargets = loginTargets;

    for (id target in self.loginTargets)
        [target setImage: StyleKit.imageOfLogin];
}

- (void)setLoginFocusTargets: (NSArray*)loginFocusTargets
{
    _loginFocusTargets = loginFocusTargets;

    for (id target in self.loginFocusTargets)
        [target setImage: StyleKit.imageOfLoginFocus];
}

- (void)setSwitchOnTargets: (NSArray*)switchOnTargets
{
    _switchOnTargets = switchOnTargets;

    for (id target in self.switchOnTargets)
        [target setImage: StyleKit.imageOfSwitchOn];
}

- (void)setSwitchOffTargets: (NSArray*)switchOffTargets
{
    _switchOffTargets = switchOffTargets;

    for (id target in self.switchOffTargets)
        [target setImage: StyleKit.imageOfSwitchOff];
}

- (void)setPasswordBoxTargets: (NSArray*)passwordBoxTargets
{
    _passwordBoxTargets = passwordBoxTargets;

    for (id target in self.passwordBoxTargets)
        [target setImage: StyleKit.imageOfPasswordBox];
}

- (void)setFullInputBoxTargets: (NSArray*)fullInputBoxTargets
{
    _fullInputBoxTargets = fullInputBoxTargets;

    for (id target in self.fullInputBoxTargets)
        [target setImage: StyleKit.imageOfFullInputBox];
}

- (void)setRushToBuyTargets: (NSArray*)rushToBuyTargets
{
    _rushToBuyTargets = rushToBuyTargets;

    for (id target in self.rushToBuyTargets)
        [target setImage: StyleKit.imageOfRushToBuy];
}


@end
